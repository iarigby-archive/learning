#+TODO: TODO UP-NEXT IN-PROGRESS DONE

* Tasks
** DONE mark my first task as complete usinc C-c C-t
   CLOSED: [2018-12-16 Sun 23:29]
** add next TODO using M-shift-RET (org-insert-todo-heading)
** TODO add this to git (probably not from this directory)
*** DONE add subtask
    CLOSED: [2018-12-17 Mon 11:43]
** UP-NEXT configure global todos using [[https://emacs.stackexchange.com/questions/5560/wildcard-in-org-agenda-files][this thing]] (use with C-c a t)
   SCHEDULED: <2018-12-12 Wed>
** TODO learn how to unschedule a task I accidentally scheduled
** DONE fix xfce screenshot error on save (#log). It was- guess what - because pictures was with lowercase p.
   CLOSED: [2018-12-17 Mon 00:38]
** FIXME something
* org-glossary
** org mode-only shorcuts

 TAB / S-TAB – (un)fold
 M-up/down – move a headline up or down
 M-left/right – promote or demote a headline
 M-RET – insert a new headline
M-RET - insert a new headline at the end of section 
S-left/right – cycle workflow
 
C-c C-l insert link

C-u C-c . - insert timestamp
C-c C-c apply changes to the document configuration
** document navigation:
*** C-c C-n     (org-next-visible-heading)
    Next heading. 
*** C-c C-p     (org-previous-visible-heading)
    Previous heading. 
*** C-c C-f     (org-forward-same-level)
    Next heading same level. 
*** C-c C-b     (org-backward-same-level)
    Previous heading same level. 
*** C-c C-u     (outline-up-heading)
    Backward to higher level heading. 
*** C-c C-j     (org-goto)

* learning

** currently doing

open links with C-c C-o

[[https://orgmode.org/worg/org-tutorials/orgtutorial_dto.html][org mode]]
[[http://ergoemacs.org/emacs/emacs.html][practical emacs one]] this one is partially completed I guess
[[https://orgmode.org/worg/org-tutorials/org4beginners.html][orgmode.org]]
[[https://www.youtube.com/watch?v=fgizHHd7nOo][video]] about org capabilities
[[https://praxis.fortelabs.co/building-a-second-brain-in-emacs-and-org-mode-faa20ae06fc/][setting up the second brain]]

** learning stragegy

count whenever I use the shorcut
 I finish learning the shortcut


** practicing
command + C-g quit
command + ? displays possibilities (and describes what the command group does)

M-x eval-buffer to change settings (while on .emacs file)
M-x lisp-interaction-mode  and then C-j to evaluate
M-x | - shell-command
M-x shell/term/eshell eg in eshell grep 

C-h + k : display what command does

open menu: f10
open file: C-x C-f  
navigating menu: C-b, C-f (left/right), C-p, and C-n (up/down)


paste text: C-y
kill buffer: C-x k RET
undo/redo: C-_ or C-/ / C-g undo (undo further)
switch buffer: C-x b RET (or buffer name)
list buffers: C-x C-b 

M-x command: command shortcut
other window: C-x o [M-x other-window]
split-window-right/left: C-x 2/3
delete-window: C-x 0
delete-other-windows: C-x 1

C-x C-s – save file

** inbox (next in line)


** learnt

** mind-map of emacs
.emacs file is evaluated on startup. It's nothing but lisp statements, you can define functions and then use them in the same file
all packages are loaded (where from?) but if you want to configure them, you should first require and then set stuff
reapplying configuration settings is done by simply evaluating the .emacs file
* setup
*** install themes
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
M-x package-install monokai-theme
M-x package-install cherry-blossom

in .emacs
(load-theme 'cherry-blossom t)

**** TODO and also write down which one is used but maybe needs to be moved 

*** configure cursor
(setq-default cursor-type 'bar)
(set-cursor-color "#54fffc")


*** set up melpa
https://melpa.org/#/getting-started


*** installed packages:
multiple cursors: https://github.com/magnars/multiple-cursors.el
expand region: https://github.com/magnars/expand-region.el

*** configuring org

[[https://superuser.com/questions/299886/linewrap-in-org-mode-of-emacs][wrap text on org]]


*** configurations
**** org-mode
***** capture
- [ ] create default directory [[https://orgmode.org/manual/Setting-up-capture.html#Setting-up-capture][link]]
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC
***** org-indent and visual-line-mode
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map "\M-q" 'visual-line-mode)
(with-eval-after-load 'org       
  (setq org-startup-indented t) ; Enable `org-indent-mode' by default
  (add-hook 'org-mode-hook #'visual-line-mode))
#+END_SRC

** Wish list
- include estimated time in scheduling
could use for filtering in search

find out if it's possible to create different workflows or sth
find out a way to open manual here instead of googling every few seconds (plus would be 
automatically toogle word wrap for org docs and make it so that they're not split mid word, like right now

[[https://orgmode.org/manual/Creating-timestamps.html][use this]] to create outlines that would unify the day (notes taken, etc) 
but still keep different things in different files

that way there would be the top hierarchy in files and 

*** sparse tree
[[https://orgmode.org/manual/Sparse-trees.html][this]] set up for FIXMEs

*** setup/
omg [[https://orgmode.org/manual/Capture.html][this]] is all I ever wanted
    padding on windows [[https://github.com/hlissner/doom-emacs/issues/567][link]]
googling from here
capture
- [[https://www.reddit.com/r/emacs/comments/7zqc7b/share_your_org_capture_templates/][useful templates]]
perspective
[[https://www.gnu.org/software/emacs/manual/html_node/org/TODO-types.html][Todo types]]
edit 


*** create/find
    see history of the line on git (probably right side)
    create configuration file for window setup (including reload)
    have a function to type in and add to notes (maybe small buffer window
    and would be able to switch between different output location for the note)

searching and navigating to note just like in a dir and it would be outputed to buffer


*** learn
write down documentation for window configuration with explanations

*** setting up task management
- if you have a lot of some tag in one doc, you would set up in heading and all sub headings would be automatically synced
- before commiting, this should all be moved somewhere and the journal, etc should be personal

front end for:
bookmarks
html (set up a progressive web app where the only thing service worker would do is get html page and store outgoing changes when offline)
